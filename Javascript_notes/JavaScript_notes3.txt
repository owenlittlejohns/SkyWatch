# Notes on the third JavaScript course from Code School

#
# Function expressions

Function declaration = function that is just defined and stored in memory.

Choice of functions to to build when website loads - minimise what the website has to do.

Can build functions on the fly, within code, rather than at program load time.

Function expression within code is called differently:

```
var diff = function diffOfSquares(a, b){
    return a*a - b*b;
};
```

It is only loaded into memory when this line of code is called by the programme.

As this is an assignment statement, it needs a semicolon after the last curly bracket.

To call it, call the name of the variable that the function is assigned to:

`diff(9, 5);`

But - here's the thing, because it has a variable name, you don't need the function name. You can make it an anonymous function:

```
var diff = function (a, b){
    return a*a - b*b;
};
```

If you try to print the variable the function is assigned to, i.e.:

`console.log(diff);`

It will return the code for the function.

Stored functions can be passed to other functions!

```
var greeting;
...code to set newCustomer to true or false...

if (newCustomer){ 
   greeting = function(){
     alert("Message!");
   };
} else {
  greeting = function(){
     alert("Message2!");
  };
}

closeTerminal(greeting);
function closeTerminal(message){
	 message();
}

```

#
# Using function expressions with arrays and map()

Have an array of numbers:

`var numbers = [12, 4, 3, 9, ...];`

And an array of results:

`var results = numbers.map(*some coolFunction goes in here*);`

Map always takes a function as a parameters. It applies `coolFunction` to each cell in turn.

`map()` works like a loop. It compresses the loop to one line of code.

You can also pass a function (in full) to the `map()` method:

```
var results = numbers.map(function (arrayCell){
    	      		     return arrayCell * 2;
			  }
);
```

Short functions called this way are often condensed into one line:

```
var results = numbers.map(function (arrayCell){return arrayCell * 2;});
```

#
# Returning functions and immediate invocations:

Returning a functions:

```
function mystery () {
  *some mystery code*
  return *a function expression*
}

```

A queue - add new elements to the end of it. So push().

Remove things from the queue - use shift() method. It pops things off the front and returns.

```
function function1 (par1, par2, par3){
  if(condition1){
    return function(){*function code*};
  } else {
    return function(){*alternative function code*};
  }
}
var par1 = val1;
var par2 = val2;
var par3 = val3;

var result = function1(par1, par2, par3);

result();
```

You can immediately call the function instead of storing it.

So instead of: `var result = function1(par1, par2, par3);`

You have: `result = function1(par1, par2, par3);`

But it will just return the function, but does include the correct values.

To evaluate (invoke) it immediately:

`result = function1(par1, par2, par3)();`

If you have an array of functions and want to call the ith function in it:

`var result = arrayOfFunctions[i](input pars);`

#
# Closure:

Closures used to build "function factories".

An example of a closure, is in the last course, where you are returning a function with variables that weren't created in that function. 

When we return a function from a function, where the variables were made in the external function, we have a closure. The variables are still available outside the function?

A small example:

A closure wraps up an entire environment, binding variables from ther scopes (so other functions etc).

```
function testClosure (){
  var x = 4;
  return x;
}
```

`x` is local and can only be accessed within the `textClosure` function.
Accessing `x` outside the `testClosure` will not work.

Now:

```
function testClosure (){
  var x = 4;
  function closeX() {
    return x;
  }
}
```

The inner function can access the outer function's variables, because they seem to be global variables to it.

When looking for variables, the inner function first looks inside it's own code, then outwards into the outer function. If necessary it would keep going. It then assigns the value as determined outside.

Then we assign the results of the outer function to a variable:

`var checkLocalX = testClosure();`

This returns the value, but even though the function's, scope is closed, we can still access the value.

Closures helpful in function "construction zones". They make the creation of very similar functions very efficient.

Imagine a submarine, ship and seagull. We could make a ticket maker for each of them.

```
function buildCoveTicketMaker( transport ) {
  return function ( name ) {
    alert("Here is your ticket via the " + transport + ".\n" + "Welcome to the Cold Closures Cover, " + name + "!");
  }
}
```

If we wanted ticket makers for the three things:

```
var getSubTicket = buildCoveTicketMaker("Submarine");
var getShipTicket = buildCoveTicketMaker("Ship");
var getGullTicket = buildCoveTicketMaker("Gull");
```

If you call `getSubTicket` it will look like they all have `transport`, except they have the actual values. But the named variable is still undefined. We need to call the ticket makers:

```
getSubTicket("Mario");
getShipTicket("Luigi");
getGullTicket("Bowser");
```
The functions all get called, the alert gets sorted. 

Okay, so here is how you think about it. The double function thing `buildCoveTicketMaker` is called. It returns an anonymous  function - which has one of the values (`transport`) determined, but it means that the variable it is assigned to (i.e. `getSubTicket`) is now just a call to that inner function. So, `getSubTicket` is actually just the anonymous function, with `transport` set to sub. When you call `getSubTicket` you need to call it with all the required parameters of the anonymous function (i.e.: `name`).

#
# Modifying bound values after closure:

Passenger tracker - how many times have we given a ticket to specific mode of transport.

```
function buildCoveTicketMaker( transport ) {
  var passengerNumber = 0;
  return function ( name ) {
    passengerNumber++;
    alert("Ticket using " + transport + " Welcome, " + name + "you are passenger #" + passengerNumber);
  }
}
```

This will increase the number of tickets for that mode of transportation.
Every time we call the ticket maker, it will increment the counter.

#
# More on closure:

Common mistakes:

1) Loops!

Example give a specific passenger a torpedo to look after:

```
function assignTorpedo ( name, passengerArray ){
  var torpedAssignment
  for (var i = 0; i<passengerArray.length; i++) {
    if (passengerArray[i] == name) {
      torpedoAssignment = function () {
        alert("Ahoy, " + name + " Man post at torpedo #" + (i+1) + "!");
      }
    };
  }
  return torpedoAssignment;
}

var subPassengers = ["Luke", "Leia", "Han", "Chewie", "Yoda"]
var giveAssignment = assignTorpedo("Chewie", subPassengers);
// At this point the result is the alert with "Chewie" in it.
giveAssignment();
```

The result is torpedo 5, not 4, where Chewie is in the array.

What happens is closures bind at the last opportunity. So they capture the final variable states. The loop counter gets to the end, and the value will be the last value of i, not the one where the condition was met.

To avoid this:

1) Could make the loop return immediately upon meeting the condition:

```
function assignTorpedo ( name, passengerArray ){
  var torpedAssignment
  for (var i = 0; i<passengerArray.length; i++) {
    if (passengerArray[i] == name) {
      return function () {
        alert("Ahoy, " + name + " Man post at torpedo #" + (i+1) + "!");
      };
    }
  }
  return torpedoAssignment;
}

var subPassengers = ["Luke", "Leia", "Han", "Chewie", "Yoda"]
var giveAssignment = assignTorpedo("Chewie", subPassengers);
// At this point the result is the alert with "Chewie" in it.
giveA
```

This will have the exact number at the moment of meeting condition.

Or, we could do it more like the submarine example:

```
function makeTorpedoAssigner ( passengerArray ) {
  return function ( name ) {
    for (var i = 0; i<passengerArray.length; i++) {
      if (passengerArray[i] == name {
        alert("Ahoy, " + name + " Man post at torpedo #" + (i+1) + "!");
      }
    }
  };
}

var subPassengers = ["names"];
var getTorpedoFor = makeTorpedoAssigner(subPassenger);
getTorpedoFor("Chewie");
```

So in this example, the closure only captures the name, not the index. The index is taken care of later on.

#
# Hoisting:

Load order of the function of the website. Load order is important in JavaScript, particularly when some parts of programme rely on others.

Load order is making sure each line of code can be executed when it needs to be.

When you initially open a scope, the first thing that happens is that memory will be set aside for all necassary variables and declared functions the console can see.

So initially, all the variables and functions are hoisted to the top, variables are set to undefined, until the code is run.
The functions are stored ready for use, too.

So, say you define a function twice, with the same name, both get hoisted to the top, and the second instance of the function will be the one that gets used.

Function expressions are not hoisted, they are treated as assignments. For example:

```
function getMysteryNumber () {
  var chooseMystery = function() {
    return 12;
  }

  return chooseMystery();

  var chooseMystery = function() {
    return 7;
  }
}
```

what JavaScript does is:

```
function getMysteryNumber () {
  var chooseMystery = undefined; // assignment is hoisted to the top
  var chooseMystery = undefined; // This is also hoisted, and undefined, but overwrites the previous declaration of chooseMystery.
  chooseMystery = function () {
    return 12;
  }
  return chooseMystery();
}
```

So the code never gets to the second part of getMysteryNumber() and the first one is the one that is called.

To fix hoisting, you can:

1) Move the function expressions to the top, above other executable code.
2) Make the functions outright declarations:

```
function noSeats(){
  alert("There are no seats!");
  return false;
}
```

#
# Objects:

Type of data structure. Objects contain multiple related data.

Data within the object container are called properties.

An example:

Book is an object.
Properties: title, author, publisher, numChapter, numPages, illustrator

An object is often called a composite value (it has lots of stuff in it).
properties can be numbers, strings, arrays, functions or even other objects.

An easy way is an object literal:

```
var = object1 = {property1String: val1, property2String: val2};

```

Curly brackets mean object.
You can also set properties equal to variables.

To access an object property:

`object1.property1String;`

You can change property values within an object using the dot operator.

`object1.property1String = 12;`

But if a propery was related to this, it would be wrong.

So say you had four properties:

```
var myBox = {width: 6, height: 4, length: 5, volume: 120};
```

but you change `myBox.width`, the volume would be incorrect. Instead of hardwiring it, make it:
`myBox.volume = myBox.width * myBox.height * myBox.length;`


But if there was an array:

`myBox.contents.push("blah")`

Now the external array that the object refers to is changed. It is not an independent array.

You can add properties, post creation of object.

`myBox.newProperty = 24;`

If the property isn't already present, then a new property would be added.

You can also use brackets:

`myBox["volume"]` just like Pandas data array. Indices are basically strings.
This means that you could make a property with a space in it.
But you can't access `myBox."any string"`. It has to be with a bracket method.

Brackets also accept expressions:

i.e.:

```
var myBox = {destination1: "Orlando", destination2: "Miami"};

for (var i = 1, i <= myBox["# of stops"], i++) {
  console.log(myBox["destination" + i]);
}
```
this would return "Orlando" and then "Miami" from the loop.

Deleting keywords:

`delete myBox.contents;` this just deletes the reference in the object to the external things.

If you try to delete a non-existant property, it will return true. (Because it checks if something is not there)

```
var myBox = {height: 6, length: 10, width: 12, "# of Books": 0};

function addBook (box, name, writer) {
  box["# no of Books"]++;
  box["book" + box["# of Books"]] = {title: name, author: writer};
}
```

So this adds objects, as properties under the names "book1", "book2" ...

Referencing properties of objects that are properties of other objects.

i.e.:

`console.log( myBox["book1"]["author"] )` or `console.log( myBox.book1.author )`

#
# Functionality of objects:

Example: have an aquarium object. It is filled with fish, which are each an oject:

```
var aquarium = {
  Nemo: { type: "fish", species: "clownfish", length: 3.7 },
  Dory: { type: "fish", species: "blue tang", length 6.2 },
  "Coral Castle": { type: "environment", material: "coquina", moves: false }
};
```

Maybe you want to add a fish, you can make a function to do that:

```
function addFish( container, name, type, species, length) {
  container[name] = {type: type, species: species, length: length};
}
```

or a Toy:

```
function addToy( container, name, type, material, moves) {
  container[name] = {type: type, material: material, moves: moves};
}
```

It would be better is these functions were within the object, instead of outside:

```
var aquarium = {
  Nemo: { type: "fish", species: "clownfish", length: 3.7 },
  Dory: { type: "fish", species: "blue tang", length 6.2 },
  "Coral Castle": { type: "environment", material: "coquina", moves: false },
  addFish: function (name, type, species, length) {
    this[name] = {type: type, species: species, length: length}
  }
};
```
The `this` tells the object that the function is refering to the object you are currently in.

How about deleting, adding a property after the object has been made:

```
aquarium.takeOut = function ( name ) {
  this[name].name = name;
  var temp = this[name];
  delete this[name];
  return temp;
};
```

temp is a variable to hold on to the object being remove for the time being.

So the `aquarium.takeOut` method does the removing from the `aquarium` object, but it can be saved. Although to make sure you don't lose the name of the object being removed, the `this[name].name = name;` line has added an extra property for later use.

Using a dot, rather than the bracket method, mean that the property will be just the string "name" not the parameter value for "name".

#
# Using objects:

For example how many fish are there in the tank?

An object doesn't have a length, so can't loop over the number of properties.

Enumeration -with the for-in loop.

```
var numFish = 0;
for ( key in aquarium ) {
  if ( aquarium[key].type == "fish" {
    numFish++;
  }
}
```

`key` just means property. - it's like Python loops.

But if there is no property of `type` in one of the properties, then it is `undefined`. So it still works.

Again, this can go inside the object, changing it to a function, with a return and also the reference to `aquarium` becomes `this`.

#
# Prototypes:

(and inheritance). Lots of objects with some small amount of similar functionality/properties. We don't want to code it all up a lot - it's time consuming and more memory intensive.

Objects have hidden properties, such as:

`valueOf`, `constructor`, `toLocaleString`, `toString`, `isPrototypeOf`, `propertyIsEnumerable`, `hasOwnProperty`...

An object's parent is called it's "prototype", all the methods above come from the object prototype.

When a generic object is created, it gets given a load of extra properties from the object prototype.

Passing down properties is called "inheritance". It stops having many storage locations for the same information.

All objects made so far inherit from the object prototype, but all native JavaScript data structures inherit all of their properties and methods from their own prototypes.

i.e.:

```
var myArray = ["This", "Array", "inherits", "properties"];
```

The array prototype gives the array the `pop()`, `push()`, `shift()`, `reverse()`, `sort()`, `join()`, `slice()`, `length` methods.

The same with strings:

`var myString = "A secret child of the string prototype";`

Properties passed along include:

`length`, `concat()`, `toUpperCase()`, `charAt()`, `indexOf()`, `toLowerCase()`, `trim()`, `replace()`, `substring()`

`var myNumber = 6;`

Example properties from the Number Prototype:

`toFixed()`, `toExponential()`, `to Precision()`

And the function prototype includes:

`name`, `bind()`, `call()`, `apply()`

The prototypes inherit directly from the object prototype. So a string variable doesn't just get the string methods, it gets the object methods, too. (e.g.: `myString.toString()`, `myString.isPrototypeOf()`)

The object prototype is an ancestor of the string prototype.

While the properties are inherited, they are not owned by the inheriting object. They are owned by the prototypes.

For example, if you call `myString.hasOwnProperty()` the string checks with the string prototype, because it doesn't contain it directly. It's not in the string prototype, but it is in the object prototype - further up the prototype chain.

What if we wanted to add some base values to all objects of a similar type?

Say for example you had a bunch of strings (quotes from characters in the Wizard of Oz) and you want to count the number of "a"s in each quote.

So you build a function to do the counting. Then you can add the property to the string prototype.

`String.prototype` finds the prototype for all strings. To add a method to it, just use the dot notation as before:

```
String.prototype.functionName = function ( letter ) {
  var letterCount = 0;
  for (var = 0; i<this.length; i++) {
    if (this.charAt(i).toUpperCase() == letter.toUpperCase() {
      letterCount++;
    }
  }
  return lettercount;
};
```

As the string is calling the method, you don't need to include the string as an input parameter.

`this` always refers to the calling object, in this case the specific string - not the String.prototype.
`toUpperCase()` is super useful for character comparison - if you don't care if the character is lower or upper case.

#
# Inheritance and constructors.

You can also create objects using `object.create()`. You can do this to create objects that have inheritance from existing objects.

Example - set up a shoe object:

`var shoe = {size: 6, gender: "women", construction: "slipper"};`

Then set up another object:

`var magicShoe = Object.create( shoe );`

`magicShoe` would be exactly the same as `shoe`.

You can then add new properties to the `magicShoe`, but the original `shoe` won't change.

`Object.prototype.isPrototypeOf(shoe);` Asks if the Object prototype is a prototype of `shoe` - returns `true` (if it wasn't it would return `false`).

Another example would be `shoe.isPrototypeOf( magicShoe );`.

The `isPrototypeOf()` method searches the whole prototype chain.

We could build a prototype with the right properties, but set them to `undefined`, so that the right properties are there.

`var shoe = { size: undefined, gender: undefined, construction: undefined}`

But then you'd have to set the values of each property - which is still time consuming.

Instead:

Establish all the common properties of the shoe class.

A class is a set of Objects that all share and inherit from the same basic prototype.

So all shoes have `size`, `color`, `gender`, `construction`, `putOn()`, `takeOff()`

Some have: `laceColour`, `laceUp()`, `jewels`, `bowPosition`

So with the set of common properties, we can build a constructor function for a shoe object. It will set up inheritance, and assign specific properties. If you are making a constructor (a Class of objects) you must capitalise the function name:

```
function Shoe (shoeSize, shoeColour, forGender, constructStyle) {
  this.size = shoeSize;
  this.colour = shoeColour;
  this.gender = forGender;
  this.constructor = constructStyle;

  this.putOn = function () {alert("Shoe is on");};
  this.takeOff = function () { alert("Shoe is off");};
}
```

Each of parameters will have specific values for specific types of shoe.

The `this` keyword inside a constructor automatically refers to the new instance of the class that is being made (so the new shoe object).

To use the constructor you need to use the `new` keyword. (This instantiates the class).

`var beachShoe = new Shoe( 10, "blue", "women", "flipflop" );`

So there is a new instance of `Shoe` with those specific values.

You can then call any of the methods from the constructor class, i.e.:

`beachShoe.putOn();`

Also, you could add extra properties that are unique to the `beachShoe`.

But there is no inheritance. Each property that the shoe has belong to the shoe.

Every shoe has the `putOn()` and `takeOff()` function. So you can assign a prototype to a constructor.

```
function Shoe (shoeSize, shoeColour, forGender, constructStyle) {
  this.size = shoeSize;
  this.colour = shoeColour;
  this.gender = forGender;
  this.constructor = constructStyle;
}

Shoe.prototype = {
  putOn: function () {alert("Shoe is on");},
  takeOff: function () { alert("Shoe is off");}
};
```

So a prototype is basically another property of a class, and it can be given properties itself.

This saves data, as each Shoe object will inherit the `putOn()` and `takeOff()` methods, rather than having then explicitly.

`hasOwnProperty("property")` is a boolean to see if the property is specifically from that class or inherited.

Prototypes can also refer back to the instance, for example:

```
function Shoe (shoeSize, shoeColour, forGender, constructStyle) {
  this.size = shoeSize;
  this.colour = shoeColour;
  this.gender = forGender;
  this.constructor = constructStyle;
}

Shoe.prototype = {
  putOn: function () {alert("Your " + this.construction + "'s is on");},
  takeOff: function () { alert("Size " + this.size + " is off");}
};
```

So the method will look down to the instance and pull the value for the property to put in the prototype message.

#
# Overriding prototypal methods:

Useful properties in the object prototype:

```
var x = 4;
var y = "4";
x.valueOf();
y.valueOf();
x.valueOf() == y.valueOf();
```

Returns:
1) `4`
2) `"4"`
3) `true`

`valueOf()` tries to use type coersion - if there is a number in a string, the method will try to convert that into a number.

Instead, we want to compare types, too.

`x.valueOf() === y.valueOf()`

the triple equals operator also considers type. So different types are not the same.

If you call `valueOf()` on an object created by us:

```
var Tornado = function (category, affectedAreas, windGust) {
  this.category = category;
  this.affectedAreas = affectedAreas;
  this.windGust = windGust;
};
var cities = [["cityName1", pop1],["cityName2", pop2],["cityName3", pop3]];
var twister = new Tornado( "F5", cities, 220 );
twister.valueOf();
```
would return `Tornado {category: "F5", affectedAreas: Array[3], windGust: 220}

But the array doesn't give you much help. So we want to improve the `valueOf()` method for this class.

Safety first - don't overwrite a property in the Object class - only one that will override the one in the lowest method of the prototype chain - i.e. `Tornado`

In this example make the `valueOf()` return the sum of all the people in all of the affected areas.

```
var Tornado = function (category, affectedAreas, windGust) {
  this.category = category;
  this.affectedAreas = affectedAreas;
  this.windGust = windGust;
};
var cities = [["cityName1", pop1],["cityName2", pop2],["cityName3", pop3]];
var twister = new Tornado( "F5", cities, 220 );

Tornado.prototype.valueOf = function () {
  var sum = 0;
  for (var i = 0; i < this.affectedAreas.length; i++) {
    sum += this.affectedAreas[i][1];
  }
  return sum;
};
twister.valueOf();
```

This then returns a sum of the people for `twister.valueOf();`

The prototype chain is search most locally first, then upwards.

The value updates as the cities are updated.
`cities.push(["cityName4", pop4]);`
So if you push a new city to the `cities` array, the result will change.
Remember, the `twister` object belongs to the `Tornado` class, and references the `cities` array for the affected areas. So changing the `cities` array itself, changes what the object contains (well refers to).

`toString()`

Often a boring method. If you call it on a number, it becomes a string.

If you call `toString()` on an array `arrayName.toString()`, then it produces a single string, that is every element, concatenated with a comma between.

But you can override it. This is often desirable to do on an array or a function.

If you call `funtionName.toString()` you get  string of the entire function.

Now in the `Tornado` constructor:

```
Tornado.prototype.toString = function () {
  var list = "";
  for (var i = 0; i < this.affectedAreas.length; i++) {
    if ( i < this.affectedAreas.length - 1) {
      list = list + this.affectedAreas[i][0] + ", ";
    } else {
      list = list + "and " + this.affectedAreas[i][0] + "!";
    }
  }
  return "This tornado has been classified as an " + this.category + ", with wind gusts up to " + this.windGusts + "mph. Affected areas are: " + list + ",potentially affection a population of " + this.valueOf() + ".";
};
```

So the string is now very informative, well representing the object as a string.

Finding an object's constructor and prototype.

If you call `twister.constructor;` you get the entire constructor code for `twister`. The actual code.

`twister.constructor.prototype;` Gives something like: `Object {valueOf: function, toString: function}` so it tells you what the prototype specifically for the constructor (class) is.

If a prototype object is defined for a specific class, it will always be a property of the class's constructor. This is why you can do the `objectName.constructor.prototype` with dot notation.

or you can do: `twister.__proto__;`

`hasOwnProperty()`, helps you find where the methods are stored.

Function to find the owner of a particular property:

```
Object.prototype.findOwnerOfProperty = function ( propName ) {
  var currentObject = this; //object being searched - start at calling object
  while (currentObject !== null){
    if ( currentObject.hasOwnProperty(propName) ) {
      return currentObject;
    } else {
      currentObject = currentObject.__proto__;
    }
  } // keep searching until try to go beyond Object prototype (would produce `null`
  return "No property found!";
};
```

To get to that bottom `return` statement, you would have to have searched the entire hierarchy chain.

#
# More useful links:

coding.smashingmagazine.com/2009/02/08/50-extremely-useful-javascript-tools/

javascriptkit.com - lots of readymade scripts in there.
scripterlative.com - more scripts that are useful to use or to trace.
