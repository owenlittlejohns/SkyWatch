# Notes on the second Code School JavaScript course:

#
# While-loops

Basic while-loop, continues to run while boolean expression is true.

Simple example:

``` while(*some expression is true*){
    
        *do this code!*

}```

An infinite loop would have the expression: `while(true){}`

So to print numbers 1 to 5 in ascending order:

```
var number = 1;
while (number <= 5){

      console.log(number)
      number++;
}
```

or another example:

```
var trainNumber = 1;
while (trainNumber <= 8){
      console.log("Train #" +trainNumber + " is running.");
      trainNumber++;
}
```

In practice, though, change "8" to a variable that can be changed.

#
# The For-Loop:

Example:

```
for (*start counter here*; *condition to loop if true*; *do this after iteration*{

* code to run*

}
```

So train example:

```
for (var trainNumber = 1; trainNumber <= trainsOperational; trainNumber++){
    console.log("Train #" + trainNumber + " is running.");
}

```

Or printing something in descending order:

```
for(var number = 5; number > 0; number--){
	console.log(number)
}
```

List the non-operational trains (9 -12):

```
var trainsOperational = 8;
var totalTrains = 12;
for(var stoppedTrain = trainsOperational + 1; stoppedTrain <= totalTrains; stoppedTrain++){
	console.log("Train #" + stoppedTrain + " is not running.");
}
```

For reality - use while loop to go through all running, then for loop for rest from 1 more than the end of the running loop.

#
# If, Else statements:

Example to combine train loops:

```
for (var trainNumber = 1; trainNumber <= totalTrains; trainNumber++){
    if(*condition is true*){
    	*do this*
    } else {
      	*Otherwise do this*
    }
}
```

So:

```
operationalTrains = 8;
for (var trainNumber = 1; trainNumber <= totalTrains; trainNumber++){
    if(trainNumber <= operationalTrains){
    	console.log("Train #" + trainNumber + " is running.");
    } else {
      	console.log("Train #" + trainNumber + " is not running.");
    }
}
```

#
# If-Else - If statement

```
if(condition1){
  *do code1*
} else if (condition2){
  *do code2*
} else {
  *All other cases: do code3*
}

```
 For a train with a special case (train 10 is the express train):

```
operationalTrains = 8;
for (var trainNumber = 1; trainNumber <= totalTrains; trainNumber++){
    if(trainNumber <= operationalTrains){
    	console.log("Train #" + trainNumber + " is running.");
    } else if (trainNumber == 10){
        console.log("Train #10 begins running at noon.");
    } else {
      	console.log("Train #" + trainNumber + " is not running.");
    }
}
```

Nested conditions:

Pay attention to indentations.

i.e. Big red squares, small blue squares, purple circles:

```
if (shape == square){
   if (size == big){
      "make it red";
   } else {
      "make it blue";
   }
} else {
  "it must be a circle, so make it purple";
}
```

Extra statements - if all trains are running just print single message - or if none, again a single statement.

```
...
if (trainsOperational > 0){
   if (trainsOperations == totalTrains){
      console.log("All trains are running today!");
   } else {
     for (var trainNumber = 1; trainNumber <= totalTrains; trainNumber++){
     	 if (trainNumber <= trainsOperations){
     	    console.log("Train #" + trainNumber + " is running today!");
     	 } else if(trainNumber == 10){
            console.log("Train #10 is an express train at noon!");
     	 } else {
           console.log("Train #" + trainNumber + " is not running today!");
     	 }
      }
   }
} else {
  console.log("There are no trains running today!");
}

```

#
# Complex conditionals:

&& - AND
|| - OR

Examples:

```
> (11 >= 11) && (-7 < 6)
```

So if we wanted a second express train (10 and 12)

```
...
if (trainsOperational > 0){
   if (trainsOperations == totalTrains){
      console.log("All trains are running today!");
   } else {
     for (var trainNumber = 1; trainNumber <= totalTrains; trainNumber++){
     	 if (trainNumber <= trainsOperations){
     	    console.log("Train #" + trainNumber + " is running today!");
     	 } else if(trainNumber == 10 || trainNumber == 12){
            console.log("Train #" + trainNumber + " is an express train at noon!");
     	 } else {
           console.log("Train #" + trainNumber + " is not running today!");
     	 }
      }
   }
} else {
  console.log("There are no trains running today!");
}
```

What if train 3 only runs on Sunday:

```
...
var dayOfWeek = "Friday"
if (trainsOperational > 0){
   if (trainsOperations == totalTrains && dayOfWeek == "Sunday"){
      console.log("All trains are running today!");
   } else {
     for (var trainNumber = 1; trainNumber <= totalTrains; trainNumber++){
     	 if (trainNumber <= trainsOperations && trainNumber != 3){
     	    console.log("Train #" + trainNumber + " is running today!");
     	 } else if(trainNumber == 10 || trainNumber == 12){
            console.log("Train #" + trainNumber + " is an express train at noon!");
	 } else if(trainNumber == 3 && dayOfWeek == "Sunday"){
	    console.log("Train #" + trainNumber + " is running today!");
     	 } else {
           console.log("Train #" + trainNumber + " is not running today!");
     	 }
      }
   }
} else {
  console.log("There are no trains running today!");
}
```

#
# Built-in functions:

Functions that can be used to get and send information:

`alert()` - sends a message to the user in a pop-up window

```
alert("Alert text");
```

`confirm()` - asks users for consent to move forward.

```
confirm("Do you want to do this?");
```

Ok or cancel - returns True or False boolean.

`prompt("String")` - makes a pop-up window that allows user to enter text

You can store information from a prompt function:

```
var userName = prompt("What is your name?");
```

Could use the prompt() and confirm() commands to get information and check it is
correct.

```
var userName = prompt("What is your name?");
confirm("Is " + userName + " your name?");
```

But you need to check someone has entered text in the prompt:

Use the `typeof` operator:

`typeof true` returns "boolean"
`typeof "String"` returns "string"
`typeof 42` returns "number"
`typeof undefined` returns "undefined"
`typeof null` returns "object"

If the user ever selects cancel - the return from a prompt because "null", which has a type of "null"

What if a confirm() function is cancelled? If cancelled it will be false.

Want a confirmation flag, continue until the user confirms a name.

```
var gotName = false;
while(gotName == false){
  var userName = prompt("What is your name?");
  if ( confirm("Are you sure " + userName + " is your name?")){
     alert("Hi, " + userName + "!");
     gotName = true;
  }
}
```

#
# Declarations:

Building your own functions.

Function takes input, does stuff to it and outputs.

```
function functionName (input1, input2) {
  *code doing stuff*
  return outputStuff
}
```

Example, summing two cubed numbers:

```
function sumOfCubes (a, b){
  var aCubed = a * a * a;
  var bCubed = b * b * b;
  var sum = aCubed + bCubed
  return sum;
}
```

Then call as `sumOfCubes(4, 9);`

More efficient:

```
function sumOfCubes (a, b){
  return a * a * a + b * b * b;
}
```

Expressions can be passed in instead of parameters:

`sumOfCubes(1 + 3, 3 + 5);`

Also variable names.

#
# More complicated functions:

Count the number of Es in a user entered phrase.

```
function countE () {
  inputStr = prompt("Please enter a phrase:");
  if typeof(inputStr) != "string"{
    alert("Not a valid string"");
    return false;
  } else {
    eCount = 0;
    for (var index = 0; index < inputStr.length; index++){
    	if(inputStr.charAt(index) == "e" || inputStr.charAt(index) == "E"){
	  eCount++;
	}
    }
    alert("There are " + eCount + "E's in \"" + inputStr + "\".");
    return True;
  }
}
```

#
# Local and global scope:

Functions will always declare a new local variable.

i.e.:

```
var x = 6;
function add(a,b){
  var x = a + b;
  return x;
}
```

The `x` within the function is only local. The global `x` is still 6.

But if you don't declare the variable, then it assumes you are using the global.

```
var x = 6;
function add(a,b){
  x = a + b;
  return x;
}
```

In the above function, the global value of `x` is changed in the function.

#
# Arrays:

Indices are 0 - N -1.
```
var arrayName = ["bob", "bob2", "bob3"];
arrayName[0];
arrayName[2] = "bob4";
```
The last bit returns the first entry.

Arrays have methods.

`arrayName.pop()` removes the last entry, and returns it.
`arrayName.push()` adds an entry to the end of the array.

Arrays can hold anything - combinations of them and also arrays as their elements.
Arrays can also accept variables - evaluating them as they make the array.

Indexing array in an array (2d array):

`mainArray[index1][index2]`

#
# Using loops on an array:

```
var numberList = [2, 5, ...]
for var i = 0; i < numberlist.length; i++){
    console.log("..." + numberList[i]);
}
```

Empty cells:

Can define an empty list:

```
var numberList = [];
```

Or have gaps with undefined:

```
numberList[5] = undefined;
```

`array.length;` will also print the number of elements in an array.
