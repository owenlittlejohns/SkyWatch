# Notes on jQuery second course on Code School: #

## Ajax basics: ##

Typical web request - the browser normally requests stuff from web server, which returns an HTML and maybe some JavaScript. Then the DOM is created and the JavaScript is executed.

With Ajax (Asynchronous JavaScript And XML):

Without refreshing page you can request more data from a server and then load into the page dynamically.

So when the JavaScript is being executed (after the DOM formation) there is an Ajax request to a server and a response. Then the JavaScript acts on the response, maybe interacting with the DOM and updating the webpage.

For example, the flight details for the vacations example in jQuery.

Previously, this was preloaded. But this time, we can wait to load it until someone requests it.

So making that Ajax call uses the `$.ajax(url[, settings])` method:

```
$('.confirmation').on('click', 'button', function(){
  $.ajax('http://example.org/confirmation.html', {
    success: function(response) {
      $('.ticket').html(response).slideDown(); //find the ticket and load the HTML it got back from server, then reveal with slide down.
}}
});
```

The first argument is the query. The second is an object that tells you what to do if there is success or not (they themselves are functions).

By default, Ajax uses the same domain as your webserver, but if you want to make that an external, need the full URL, not the relative one you can get away with for the local server.

The short hand version is just:

`$.get(url, success)`

i.e.

```
$.get('www.example.com/blah', function(response) {
  $('.ticket').html(response).slideDown();
});
```

The `.html(response)` method inserts the retrieved HTML into that part of the page.

But to make it more interesting - you could do this local example with a confirmation number:

```
$('.confirmation?confNum=1234').on('click', 'button', function(){
  $.ajax('http://example.org/confirmation.html', {
    success: function(response) {
      $('.ticket').html(response).slideDown(); //find the ticket and load the HTML it got back from server, then reveal with slide down.
    }
  }
});
```

Alternatively, you can use the `data` method:

```
$('.confirmation?confNum=1234').on('click', 'button', function(){
  $.ajax('http://example.org/confirmation.html', {
    success: function(response) {
      $('.ticket').html(response).slideDown(); //find the ticket and load the HTML it got back from server, then reveal with slide down.
    },
    data: {"confNum": 1234 }
  }
});
```

Perhaps that's easier with more fields.

Alternatively, again, you could store the `confNum` as a data attribute of a div:

`<div class="ticket" data-confNum='1234'>...`

Then:

```
$('.confirmation?confNum=1234').on('click', 'button', function(){
  $.ajax('http://example.org/confirmation.html', {
    success: function(response) {
      $('.ticket').html(response).slideDown(); //find the ticket and load the HTML it got back from server, then reveal with slide down.
    },
    data: {"confNum": $(".ticket").data("confNum") }
  }
});
```

What if the request times out or doesn't work:

Make an `error` function:

```
$('.confirmation?confNum=1234').on('click', 'button', function(){
  $.ajax('http://example.org/confirmation.html', {
    success: function(response) {
      $('.ticket').html(response).slideDown(); //find the ticket and load the HTML it got back from server, then reveal with slide down.
    },
    error: function(request, errorType, errorMessage) {
      alert("Error: " + errorType + " with message " + errorMessage);
    },
    data: {"confNum": $(".ticket").data("confNum") }
  }
});
```

How long does the request wait until times out - browser dependent. So you can also specify how long to wait:

```
$('.confirmation?confNum=1234').on('click', 'button', function(){
  $.ajax('http://example.org/confirmation.html', {
    success: function(response) {
      $('.ticket').html(response).slideDown(); //find the ticket and load the HTML it got back from server, then reveal with slide down.
    },
    error: function(request, errorType, errorMessage) {
      alert("Error: " + errorType + " with message " + errorMessage);
    },
    timeout: 3000, // in ms
    data: {confNum: $(".ticket").data("confNum") }
  }
});
```

Two other useful call backs to put in the `$.ajax` routine:

```
beforeSend: function() {
  $('.confirmation').addClass('is-loading');
}
```
It is run before the Ajax request is sent off - so a good place to put a loading screen.

```
complete: function() {
 $('.confirmation').removeClass('is-loading');
}
```
Run after both success or error. The last thing run, so a place to turn off the loading screen.

Be careful with click handlers. Often they are only run once, when the page is loaded. So if you haven't had your Ajax request, it can't load anything, and won't update after later requests.

You can change the click handler to always look for the link it wanted to pop up.

To do this, use event delegation.

Instead of:

`$('.confirmation .view-boarding-pass').on('click', function() {...});`

Have:

`$('.confirmation').on('click', '.view-boarding-pass', function() {...});`

## JavaScript objects: ##

Refactor to objects - because all those handlers are messy!

```
var confirmation = {
  init: function() {
    // existing event handlers i.e.:
    $('.confirmation').on('click', 'button', function() {
      $.ajax('confirmation.html', {...});
    });
  }
};
```

Then inside the document from before:

```
$(document).ready(function() {
  confirmation.init();
});
```

So all the handlers get initialised when the `init` method is called.

Also you could make all the subfunctions inside there separate functions:

```
var confirmation = {
  init: function() {
    // existing event handlers i.e.:
    $('.confirmation').on('click', 'button', this.loadConfirmation);
    });
  },
  loadConfirmation: function() {
    $.ajax('confirmation.html', {...});
  }
};
```

Nice and clean.

## JavaScript functions: ##

If you have multiple confirmations per page, you might want to put all your code in a function instead of an object.

Object version:

```
var vacation = {
  init: function() {
    // init vacation
  }
};

$(document).ready(function() {
  vacation.init();
});
```

Function version (note capital letter):

```
function Vacation(destination) {
  // initialise vacation to destination
  this.details = function() {
    console.log(destination);
  }
}

$(document).ready(function() {
  var paris = new Vacation('Paris');
  console.log(paris);
  var london = new Vacation('London');
}
```

So a nice big object from before:

```
var confirmation = {
  init: function() {
    $('.confirmation').on('click', 'button', this.loadConfirmation);
    $('.confirmation').on('click', 'view-boarding-pass', this.showBoardingPass);
  },
  loadConfirmation: function() {...},
  showBoardingPass: function() {...}
};
```

Now as a function (el = the element, the jQuery element being passed to it):

```
function Confirmation(el) {
  this.el = el; //save for reference
  this.ticket = this.el.find('.ticket');
  var confirmation = this;
  // helper methods here
  this.loadConfirmation = function() {
    $.ajax('confirmation.html', {
      timeout: 3000,
      data: {location: el.data('location')},
      context: confirmation,
      success: function(response) {
        this.ticket.html(response).slideDown();
  }
  // showBoardingPass is complicated because there are DOM elements hard coding.
  this.showBoardingPass = function() {
    event.preventDefault();
    $(this).hide();
    confirmation.el.find('.boarding-pass').show();
  }
  // event handlers here
  this.el.on('click', 'button', this.loadConfirmation);
  this.el.on('click', '.view-boarding-pass', this.showBoardingPass);
}

$(document).ready(function() {
  var paris = new Confirmation($('#paris'));
  var london = new Confirmation($('#london'));
});
```

Sometimes jQuery changes which "this" it is refering to. Inside Ajax calls it is set back to the Ajax settings, not the one in the function. So make a variable in the function, set it equal to the element this, inside the Ajax call, set the `context`, then the `this` you call in Ajax is the `this` you want.

Complicated!

## Ajax with forms: ##

Like if you select the number of nights and destination. You get a full page refresh with things you want. (`$.ajax` with `POST`)

So with the form you have a listener:

```
$('.form').on('submit', function(event) {
  event.preventDefault();
  $.ajax('/book', {
    type: 'POST',
    data: { "destination": $('#destination').val(), "quantity": $('#quantity').val() }
  });
});
```

There is a better way to serialise the form fields:

```
$('.form').on('submit', function(event) {
  event.preventDefault();
  $.ajax('/book', {
    type: 'POST',
    data: $('form').serialize()
  });
});
```

To do anything, you need the `success` method.

```
$('.form').on('submit', function(event) {
  event.preventDefault();
  $.ajax('/book', {
    type: 'POST',
    data: $('form').serialize(),
    success: function(result) {
      // get rid of the form as it is used
      $('form').remove();
      // hide HTML from output and fade in
      $('#vacation').hide().html(result).fadeIn();
    }
  });
});
```

But to make even better, make a `form` variable:

```
$('.form').on('submit', function(event) {
  event.preventDefault();
  var form = $(this);
  $.ajax('/book', {
    type: 'POST',
    data: form.serialize(),
    success: function(result) {
      // get rid of the form as it is used
      form.remove();
      // hide HTML from output and fade in
      $('#vacation').hide().html(result).fadeIn();
    }
  });
});
```

## Ajax with JSON: ##

JSON = JavaScript Object Notation.

Often an output from a server. e.g.:

```
{
  totalPrice: 2196.00,
  nights: 4,
  location: 'Paris, France',
  confirmation: '241r5q'
}
```

The previous code would need to be changed:

1) specify the response will be JSON using the `dataType` command:
2) Specify a content type. This is sent with request to server, to ensure it sends JSON
3) Change the success call - to make HTML from the JSON.
4) Ensure duplication is cut out (URL - update the '/book' the form action stuff)

```
var form = $(this);
$.ajax($($('form').attr('action'), {
  type: 'POST',
  data: form.serialize(),
  dataType: 'json',
  success: function(result) {
    form.remove();
    var msg = $("<p></p>");
    msg.append("Destination: " + result.location + ". ");
    msg.append("Price: " + result.totalPrice + ". ");
    msg.append("Nights: " + result.nights + ". ");
    msg.append("Confirmation: " + result.confirmation + ". ");
    $('#vacation').hide().html(msg).fadeIn();
  }
  contentType: 'application/json'
});
```

Interestingly, the `append` is putting it inside the `<p>` tags.

## Utility methods: ##

Show favourites button:

```
$('button').on('click', function() {
  $.ajax('/cities/favourites/1', {
    contentType: 'application/json',
    dataType: 'json',
    success: function(result) {
      var favourite = $('.favourite');
      favourite.find('p').html(result.name);
      favourite.find('img').attr('src', result.image);
    }
  }
};

```

What about multiple favourites. The JSON message returns an array of objects. But that messes up the success function. Use the `$.each(collection, function(object, index))` method. It has a collection to iterate through, and the function to apply them.

```
success: function(result) {
  $.each(result, function(index, city) {
    var favourite = $('.favourite-' + index);
    favourite.find('p').html(city.name);
    favourite.find('img').attr('src', city.image);
  };
}
```

Transforming JSON into html.

Can use the jQuery `$.getJSON(url, success);` request.

So for a list of flight statuses:

```
$('.update-status').on('click', function() {
  $.getJSON('/status', funtion(results) {
    var statusElements = $.map(result, function(status, i) {
      var listItem = $('<li></li>');
      $('<h3>' + status.name + '</h3>').appendTo(listItem);
      $('<p>' + status.status + '</p>').appendTo(listItem);
      return listItem;
    };
    $('.status-list').html(statusElements)
    });
});
```

You can make an array of results using `$.map()`

It takes a $.map(collection, function(item, index){});

Map returns an array, modified by what is returned in the function as an argument.

i.e.:

```
var myNumbers = [1,2,3,4];

var newNumbers = $.map(myNumbers, function(item, index) { return item + 1});
```

So `newNumbers = [2,3,4,5]`

`each` and `map` are different

The each method returns an array as it was when it was created.

The map method does what you ask it to.

There is also a detach method. It allows you to remove an element from the DOM. Do stuff to it, then append it back on.

It is more efficient:

```
$('.update-status').on('click', function() {
  $.getJSON('/status', funtion(results) {
    var statusElements = $.map(result, function(status, i) {
      var listItem = $('<li></li>');
      $('<h3>' + status.name + '</h3>').appendTo(listItem);
      $('<p>' + status.status + '</p>').appendTo(listItem);
      return listItem;
    };
    $('.status-list').detach().html(statusElements).appendTo('.status');
    });
});
```

## Events for plugins: ##

New scenario, two functions that both log out to the console. And a button. When the button is pressed you want to call both functions.

What is we wanted to turn off event handlers, though, so button doesn't always work.

There is an `off()` method.

So:

```
function picture() { console.log('Show plane'); }
function status() { console.log('In service'); }

$(document).ready(function() {
  $('button').on('click', picture);
  $('button').on('click', status);
  $('button').off('click') // no more event handlers will happen
});
```
What if you only want to turn off a single thing - use event namespacing:

```
$('button').on('click.image', picture);
$('button').on('click.details', status);
$('button').off('click.image'); // only turn off the image
```

You just are adding labels to the click handler to make them easier to single out.

Also, if you want ALL '.image' bits off, you can just do:

```
$('button').off('.image');
```

Another useful thing is a trigger event. So make event happen in JavaScript, rather than waiting for something to happen on the page.

```
$('button').trigger('click');
```

Or be more specific with

```
$('button').trigger('click.details');
```

So in a new example, all the individual trips have their own "show price" button.

To handle all of them:

```
// define the event handler:
$('.vacation').on('click.price', 'button', showPrice);
var showPrice = function() {
  var vacation = $(this).closest('.vacation');
  var price = vacation.data('price');
  var details = $('<p>Book 3 days for $' + (3 * price) + '</p>');
  vacation.append(details); //But it in the vacation list item.
};
```

We also want a handler to show all prices at once, but want to use the 1showPrice` function so don't repeat code:

```
var showPrice = function() {...};
$('.vacation').on('click.price', 'button', showPrice);
$('.vacation').on('show.price', showPrice);

$('.show-prices').on('click', function(event) {
  event.preventDefault();
  $('.vacation').trigger('show.price');
}
```

1) Create a custon event, called `show`
2) To trigger event to happen, we use `trigger`
3) To only do on the last item, change `'.vacation'` to `'.vacation.last'`

## Plugins - to encapsulate reusable behaviour: ##

To set up a plugin:

```
$.fn.priceify = function() {
  this.each(function() {
    var vacation = this;
    vacation.on('click.priceify', 'button', function() {
      var price = vacation.data('price');
      var details = $('<p>Book 3 days for $' + (3 * price) + '</p>');
      $(this).hide(); // hide the button
      vacation.append(details);
    });
  });
};

// use plug in:

$(document).ready(function() {
  $('.vacation').priceify();
});
```

`priceify` is the name of the plugin
`$.fn` makes the plugin available to all objects

The `this.each` loops through for each element in list to make it work properly.

We can send in argument to a plugin using a JavaScript object:

`$('.vacation').priceify({ days: 5 });`

Then in the declaration:

`$.fn.priceify = function(options) {...}`

Optional parameters... i.e. a default value for days.

You need to use the utility method: `extend()` it takes in two or more objects and combines them.

`$.extend({days: 3}, {price: 5});`

becomes:

`{ days: 3, price: 5}`

Calling the `extend` method with two objects containing the same key, the later value of that key is applied:

`$.extend({days: 3}, {days: 5});`

becomes:

`$.extend({days: 5});`

So put all the defaults in the first parameter to `extend`.

A good practice is to then refer to this new object everywhere in that function after creating it. Rather than refering to the `$(this).data`

To cleanly make the showAllPrices button. Make the behaviour inside the function for the individual button inside it's own function.

```
$.fm.priceify = function(options) {
  this.each(function() {
    var settings = $.extend{...};
    var show = function() {
      var details = $('<p>' + ... + '</p>');
      $(this).hide();
      settings.vacation.append(details);
    });
    settings.vacation.on(click.priceify', 'button', show);
    settings.vacation.on('show.priceify', show);
};
```
Then create a custon handler:

```
$('.show-prices').on('click', function(event) {
  event.preventDefault();
  $('.vacation').trigger('show.priceify');
});
```

Removing behaviour of a plugin:

Create a remove function in the plugin, and a click handler for it:

```
$.fn.priceify = function(options) {
  ...
  var remove = function() {
    setting.vacation.hide().off('.priceify');
  };
  settings.vacation.on('click-priceify', '.remove-vacation', remove);
};
```

## Promises: ##

Previous version to get weather not using a Promise:

```
$('button').on('click', function() {
  var location = $('.loc').text();
  $.ajax('/weather', {
    data: {Q: location},
    success: function(result) {
      $('.weather').text(result.weather);
    }
  });
});
```

But to extract the Ajax call for multiple pages on webside:

Build the Promise object inside a variable called weather:

(promise is the result of the Ajax query)

```
var Weather = {
  today: function(location) {
    var promise = $.ajax('/weather', {
      data: {q: location}
    });
  return promise;
}

// Use the promise:
$('button').on('click', function() {
  var location = $('.loc').text();
  var todayPromise = Weather.today(location);
  todayPromise.done(function(result) {
      $('.weather').text(result.weather);
  });
});
```

The promise misses the success method, because we want to define what happens to the Ajax upon success in the main bit of code. `promise.done` is basically what happens in `success`.

Code isn't great, because we don't know that `weather` is a thing inside the `result` object. The code would be better if it only had to know about `result`.

```
var Weather = {
  today: function(location) {
    var promise = $.Deferred();
    $.ajax('/weather', {
      data: {q: location},
      success: function(result) {
        promise.resolve(result.weather);
      }
    });
    return promise;
  }
}

// Use the promise:
$('button').on('click', function() {
  var location = $('.loc').text();
  var todayPromise = Weather.today(location);
  todayPromise.done(function(result) {
      $('.weather').text(result);
  });
});
```

Defered creates a new promise. resolve calls the done callback. If it fails, you have `reject`.

If the Ajax call fails:
```
var Weather = {
  today: function(location) {
    var promise = $.Deferred();
    $.ajax('/weather', {
      data: {q: location},
      success: function(result) {
        promise.resolve(result.weather);
      },
      error: function() {
        var error = 'invalid location';
	promise.reject(error);
      }
    });
    return promise;
  }
}

// Use the promise:
$('button').on('click', function() {
  var location = $('.loc').text();
  var todayPromise = Weather.today(location);
  todayPromise.done(function(result) {
      $('.weather').text(result);
  }).fail(function(error){
      console.log(error);
  });
});
```

Calling 2 promises, one after another:

```
$('button').on('click', function() {
  var loc = $(this).parent().data('loc');
  // empty the div in case it has previously been used by the function
  var resultsDiv = $(this).parent().find('.results').empty();
  Weather.today(loc)
    .done(function(WeatherResult){
      resultDiv.append(weatherResult);
    });
  City.find(loc)
    .done(function(cityResult){
      resultDiv.append(cityResult);
    });
});
```

But the Ajax calls get fired off together, and may finish in different orders depending on the connection to each server etc. But we want them in a fixed order.

With promises, you can use `$.when()` and `$.then()`

`$.when()` takes in any number of promises and `$.then(function(p1data, p2data))` gives the callback data in the order of the promises stored in it.

So `$.when()` makes the code wait for all the promises to complete, and `$.then()` displays them in the correct order on the screen.


```
$('button').on('click', function() {
  var loc = $(this).parent().data('loc');
  // empty the div in case it has previously been used by the function
  var resultsDiv = $(this).parent().find('.results').empty();
  $.when(
    Weather.today(loc),
    City.find(loc)).then(function(weatherResult, cityResult){
      resultDiv.append(cityResult);
      resultDiv.append(weatherResult);
    });
});
```
