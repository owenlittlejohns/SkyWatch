# HTML and CSS notes:

HyperText Markup Language.
Files always have extension .html.
Browser is basically an HTML reader.

HTML uses tags. They open <tag> and close </tag>

So a big title:

```<h1>This is a tag</h1>```

Heading tags are for headings of sections, 1 is the biggest and most important, so <h1> is usually page name, <h2> the main subject and <h3> ... <h6> are used for other things like section names.

Text goes inside a paragraph tag ```<p>Text in here.</p>```

An unordered list tag:

```<ul>
  <li> item 1</li>
  <li> item 2</li>
  <li> item 3</li>
</ul>```

Nesting of tags. In this instance ```<ul>``` is the parent tag and ```<li>``` is the child tag.

Make sure you indent code. 2 spaces indentation.

Ordered list (will automatically number the entries of the list):

```<ol>
  <li> Instruction 1</li>
  <li> Instruction 2</li>
  <li> Instruction 3</li>
</ol>```

The body tag:

All visible content goes inside ```<body></body>``` tags.
Any code that runs first before the page loads goes inside ```<head></head>``` tags.
The <head> and <body> tags also go inside <html> tags

At the very top you have the doc type, i.e. which version of HTML to use.
```<!DOCTYPE html>``` just makes the page use the latest version.

#
# Adding links to pages

URL:

protocol: https or http
server: blah.com
file: dotdotdot.html

You send a request to the server for the file. You get sent it, and then display it in the browser.

Links are a request for a new file, which will be returned and displayed.

The link uses an <a> which is short for "anchor"

```<a>link on page</a>```

would produce the link to click on the page, but hasn't got a name of a file to request.
To do that you need to use an "HTML attribute".

Attributes go inside the opening tag, and in this example it is the ```href``` attribute (URL most go in quotes):

```<a href="http://example.com/blah.html">link on page</a>```

Attributes allow you to add additional information to the tags.

There is also a target attribute:
```<a href="http://example.com/blah.html" target="_blank" >link on page</a>```

Choosing ```_blank``` means that the page will open in a new blank window.
If ```_self``` it means replace the current page with the new one. (Default)

Example ```href``` values above are absolute, stating the server etc.

If you want to query the same server, you can just use a relative path:

```<a href="blah.html" target="_blank" >link on page</a>```

With no protocol or server name specified, the browser assumes you want the same server and protocol you used before.

You should probably use relative links whenever dealing with the same server.

Creating a link to another website:

Use an absolute link.

#
# CSS (Cascading Style Sheets):

Use it to style HTML (used to make colours attributes and use tags to make things work).

CSS is a seperate language describing how tags should look.

CSS works by writing selectors that select tags and change how the act to make your HTML look a specific way.


For example:

A paragraph tag in HTML: `<p>This is a paragraph!</p>`

Can be altered by CSS, start by naming the tag:

```
p {
  text-decoration: underline;
  otherPropertyName: oneOfSeveralPropertyValues;
}
```

You must have the colon, semicolon and curly brackets. Within the curly bracket you can have mulptiple properties defined.

All instances of that one tag will be affected.

But if you want to only affect a child tag of another tag, you use a "descendent selector":

```
ul li {
   propertyName: value;
}
```

`ul` is the parent tag, and `li` is the child. So only `li` is altered if it is a child of `ul`.

Pseudo-selector: only affects a tag if certain conditions have occured:

```
tag:rule {
  propertName: propertyValue;
}
```

For example, `rule` could be `hover`, so CSS only is enacted when the mouse hovers over the text.

Another is `first-child` - it will only affect the first child tag inside parent. i.e.:

```
parentTag childTag:first-child{
  stuff: stuff;
}
```

Where do you put CSS?

Simplest:

Make `<style>` tag inside the `<head>` tag of the HTML:

```
<html>
  <head>
    <style type="text/css">
      tag {
          propertyName: propertyValue;
      }
    </style>
  </head>
  <body>
  ...
  </body>
</html>

```

#
# Hexadecimal colors:

Often used in CSS.

red = `#FF0000`
black = `#000000`
yellow = `#FFFF00`

Each hex colour has three parts:

First two digits are how much red, the next two are how much green and the last two are how much blue. `0` is none and `F` is full. Equivalent to 0 to 255.

white is all of everything.

Hexadecimal:

Instead of multiplying each progressive higher digit by ten, you do it be 16.

A = 10, B = 11, C = 12, D = 13, E = 14, F = 15.

16,770,000 ish colour combinations.

#
# The box model:

What about how much vertical and horizontal spacing between things (i.e. after ``<h1>`)

Every tag has it's own rectangle around it - the box.

Block-level tags take up the entire width of the container they are in. In a lot of instances, this is the `<body>`. So new boxes get pushed down to be below the previous boxes.

Tags that aren't bloack level, are inline-level. These just flow along with content around them - like anchor tags (links).

`img`, `input` and `label` are all other inline level tags.

You can change in CSS, tag properties between inline and block level.

```
ul li {
   display: inline;
}
```

How does the browser know how much space goes between the boxes?

The box model describes the borders and spacing between each tag, it has four components:

1. Content area = area containing the text or images, etc.
2. Padding = layer around edges of content area (left, right, top, bottom)
3. Border = outside the padding layer.
4. Margins = outside of border.

Controlled by CSS properties:

either:

```
h2 {
  padding-top: 6px;
  padding-right: 3px;
  padding-bottom: 0;
  padding-left: 0;
}
```

or more simply:

```
h2 {
  padding: 6px	3px	0	0;
}
```
(in order top, right, bottom, left)

To add a border, either:

```
h2 {
   border-width: 6px;
   border-style: solid;
   border-color: black;
}
```

or 

```
h2 {
   border: 6px	solid	black;
}
```

If you want to apply to just one side:

```
h2 {
   border-bottom: 6px	solid	black;
}
```

Margins are added the same way as padding (short or long way)

Borders are used obviously.

Padding should be used to adjust the size of a box, without adjusting the size of the content inside the box. (The content area increases, but the content does not change size. Think about it like this - if the content area had a pretty box around it, the box would change size, but the text would stay the same size.

Margins should be used to add space between two boxes. The content area stays the same size.

But why is there automatic spacing? The browser has a default style sheet. You must override them to make them what you want.

If you want to remove all padding, borders and margins:

```
html, body, h1, h2 h3, p, ol, ul, li, a {
  padding: 0;
  border: 0;
  margin: 0;
}
```

You can then restart from a safe baseline, knowing that you are the one affecting the CSS box models.

One approach to start making your page nice would be:

1) Start with the `<body>`: (Add 20px margin to all sides). Gets away from edges of screen.
2) `<h1>` Add a top and bottom margin (give vertical spacing, 10px top, 15px bottom)
3) `<h2>`, then `<h3>` adding top and bottom margin.
4) Then thing about borders. Maybe a bottom border for `<h3>`:
```
h3 {
   margin: 15px 0 15px 0;
   border-bottom: 1px solid #CCCCCC;
}
```

If you thing the border is too close to the content, then add some padding:

```
h3 {
   margin: 15px 0 15px 0;
   border-bottom: 1px solid #CCCCCC;
   padding-bottom: 3px;
}
```

Padding can be used to index list items.

```
ul, ol {
  padding: 0 0 0 5px;
}
```
