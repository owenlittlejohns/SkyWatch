# HTML and CSS notes:

HyperText Markup Language.
Files always have extension .html.
Browser is basically an HTML reader.

HTML uses tags. They open <tag> and close </tag>

So a big title:

```<h1>This is a tag</h1>```

Heading tags are for headings of sections, 1 is the biggest and most important, so <h1> is usually page name, <h2> the main subject and <h3> ... <h6> are used for other things like section names.

Text goes inside a paragraph tag ```<p>Text in here.</p>```

An unordered list tag:

```<ul>
  <li> item 1</li>
  <li> item 2</li>
  <li> item 3</li>
</ul>```

Nesting of tags. In this instance ```<ul>``` is the parent tag and ```<li>``` is the child tag.

Make sure you indent code. 2 spaces indentation.

Ordered list (will automatically number the entries of the list):

```<ol>
  <li> Instruction 1</li>
  <li> Instruction 2</li>
  <li> Instruction 3</li>
</ol>```

The body tag:

All visible content goes inside ```<body></body>``` tags.
Any code that runs first before the page loads goes inside ```<head></head>``` tags.
The <head> and <body> tags also go inside <html> tags

At the very top you have the doc type, i.e. which version of HTML to use.
```<!DOCTYPE html>``` just makes the page use the latest version.

#
# Adding links to pages

URL:

protocol: https or http
server: blah.com
file: dotdotdot.html

You send a request to the server for the file. You get sent it, and then display it in the browser.

Links are a request for a new file, which will be returned and displayed.

The link uses an <a> which is short for "anchor"

```<a>link on page</a>```

would produce the link to click on the page, but hasn't got a name of a file to request.
To do that you need to use an "HTML attribute".

Attributes go inside the opening tag, and in this example it is the ```href``` attribute (URL most go in quotes):

```<a href="http://example.com/blah.html">link on page</a>```

Attributes allow you to add additional information to the tags.

There is also a target attribute:
```<a href="http://example.com/blah.html" target="_blank" >link on page</a>```

Choosing ```_blank``` means that the page will open in a new blank window.
If ```_self``` it means replace the current page with the new one. (Default)

Example ```href``` values above are absolute, stating the server etc.

If you want to query the same server, you can just use a relative path:

```<a href="blah.html" target="_blank" >link on page</a>```

With no protocol or server name specified, the browser assumes you want the same server and protocol you used before.

You should probably use relative links whenever dealing with the same server.

Creating a link to another website:

Use an absolute link.

#
# CSS (Cascading Style Sheets):

Use it to style HTML (used to make colours attributes and use tags to make things work).

CSS is a seperate language describing how tags should look.

CSS works by writing selectors that select tags and change how the act to make your HTML look a specific way.


For example:

A paragraph tag in HTML: `<p>This is a paragraph!</p>`

Can be altered by CSS, start by naming the tag:

```
p {
  text-decoration: underline;
  otherPropertyName: oneOfSeveralPropertyValues;
}
```

You must have the colon, semicolon and curly brackets. Within the curly bracket you can have mulptiple properties defined.

All instances of that one tag will be affected.

But if you want to only affect a child tag of another tag, you use a "descendent selector":

```
ul li {
   propertyName: value;
}
```

`ul` is the parent tag, and `li` is the child. So only `li` is altered if it is a child of `ul`.

Pseudo-selector: only affects a tag if certain conditions have occured:

```
tag:rule {
  propertName: propertyValue;
}
```

For example, `rule` could be `hover`, so CSS only is enacted when the mouse hovers over the text.

Another is `first-child` - it will only affect the first child tag inside parent. i.e.:

```
parentTag childTag:first-child{
  stuff: stuff;
}
```

Similarly: `last-child`.

#
# Where do you put CSS?

Simplest:

Make `<style>` tag inside the `<head>` tag of the HTML:

```
<html>
  <head>
    <style type="text/css">
      tag {
          propertyName: propertyValue;
      }
    </style>
  </head>
  <body>
  ...
  </body>
</html>

```

#
# Hexadecimal colors:

Often used in CSS.

red = `#FF0000`
black = `#000000`
yellow = `#FFFF00`

Each hex colour has three parts:

First two digits are how much red, the next two are how much green and the last two are how much blue. `0` is none and `F` is full. Equivalent to 0 to 255.

white is all of everything.

Hexadecimal:

Instead of multiplying each progressive higher digit by ten, you do it be 16.

A = 10, B = 11, C = 12, D = 13, E = 14, F = 15.

16,770,000 ish colour combinations.

#
# The box model:

What about how much vertical and horizontal spacing between things (i.e. after ``<h1>`)

Every tag has it's own rectangle around it - the box.

Block-level tags take up the entire width of the container they are in. In a lot of instances, this is the `<body>`. So new boxes get pushed down to be below the previous boxes.

Tags that aren't bloack level, are inline-level. These just flow along with content around them - like anchor tags (links).

`img`, `input` and `label` are all other inline level tags.

You can change in CSS, tag properties between inline and block level.

```
ul li {
   display: inline;
}
```

How does the browser know how much space goes between the boxes?

The box model describes the borders and spacing between each tag, it has four components:

1. Content area = area containing the text or images, etc.
2. Padding = layer around edges of content area (left, right, top, bottom)
3. Border = outside the padding layer.
4. Margins = outside of border.

Controlled by CSS properties:

either:

```
h2 {
  padding-top: 6px;
  padding-right: 3px;
  padding-bottom: 0;
  padding-left: 0;
}
```

or more simply:

```
h2 {
  padding: 6px	3px	0	0;
}
```
(in order top, right, bottom, left)

To add a border, either:

```
h2 {
   border-width: 6px;
   border-style: solid;
   border-color: black;
}
```

or 

```
h2 {
   border: 6px	solid	black;
}
```

If you want to apply to just one side:

```
h2 {
   border-bottom: 6px	solid	black;
}
```

Margins are added the same way as padding (short or long way)

Borders are used obviously.

Padding should be used to adjust the size of a box, without adjusting the size of the content inside the box. (The content area increases, but the content does not change size. Think about it like this - if the content area had a pretty box around it, the box would change size, but the text would stay the same size.

Margins should be used to add space between two boxes. The content area stays the same size.

But why is there automatic spacing? The browser has a default style sheet. You must override them to make them what you want.

If you want to remove all padding, borders and margins:

```
html, body, h1, h2 h3, p, ol, ul, li, a {
  padding: 0;
  border: 0;
  margin: 0;
}
```

You can then restart from a safe baseline, knowing that you are the one affecting the CSS box models.

One approach to start making your page nice would be:

1) Start with the `<body>`: (Add 20px margin to all sides). Gets away from edges of screen.
2) `<h1>` Add a top and bottom margin (give vertical spacing, 10px top, 15px bottom)
3) `<h2>`, then `<h3>` adding top and bottom margin.
4) Then thing about borders. Maybe a bottom border for `<h3>`:
```
h3 {
   margin: 15px 0 15px 0;
   border-bottom: 1px solid #CCCCCC;
}
```

If you thing the border is too close to the content, then add some padding:

```
h3 {
   margin: 15px 0 15px 0;
   border-bottom: 1px solid #CCCCCC;
   padding-bottom: 3px;
}
```

Padding can be used to index list items.

```
ul, ol {
  padding: 0 0 0 5px;
}
```

#
# CSS selectors (more):

Wanting to set tag settings only on specific instance.

Inside the actual tag we want to alter, give it a class and set to "nav":

`<ul class="nav"><li>...</li></ul>`

Then in CSS:

```
.nav {
     padding-left: 0;
}
```

So using `.class` you can change things.

If you want to do things to only (in this example) anchors in the unordered list with the "nav" class:

```
.nav a {
     color: #0000af;
     text-decoration: none;
}
```

Order you write class and type selectors is important. The thing written lower down is enacted. So typically, make broad rules for generic tags first, then underneath state the specific class selectors.

Using CSS on multiple HTML pages:

CSS can be written in a text file (main.css)
Then in the HTML file, import the CSS:

Use `<link>`. It has no closing tag. This is in place of `<style tag>`

`<link type="text/css" rel="stylesheet" href="main.css">`

rel = relationship - apply all the CSS to this page
href = file with CSS styles in.

But then if you want to change an individual page on top of the main.css defaults, create a class to this specific tag.

Then change the CSS properties in main.css, but underneath the main selector.

#
# Organising page layouts:

`div` is a block way to group related content on a page.

For example: if we want a header `<div>`, put a `<div>` block around all the stuff that is grouped.

Typically, you could have a header and a main-content block, so inside the `<div>` tags (remember the closing tag) set a class to each:

```
<body>
  <div class="header">
    <h1> Recipe World</h1>
    <ul class="nav">...
  </div>
  <div class="main-content">
    <h2>Magic Cake</h2>
    ....
  </div>
<body>
```

Can now set the padding, borders and margins seperately to the borders and margins.

`<div>` automatically wants to take the whole width of the page, but can set the width.

```
.main-content {
  width: 500px;
  padding: 20px;
  border: 1px solid #dddddd;
  margin: 30px 0 0 0;
}
```

Content within this `<div>` will have to flow to fit this fixed width.

To centre content:

Two ways in CSS.

1) If you want to centre the entire block level tag, and it has a fixed width, then set the right and left margins to "auto":

```
.main-content {
  width: 500px;
  padding: 20px;
  border: 1px solid #dddddd;
  margin: 30px auto 0 auto;
}
```

This centres the total content (but not the alignment). "auto" means take as much space as you can.


2) If you want to centre content inside block level tag,  `text-align: center;`

```
h1 {
  color: #ffffff;
  margin: 0 0 15px 0;
  text-align: center;
```

Why fixed widths, rather than relative widths?

Fixed widths are good for learning. But relative are perhaps more useful in the real world.

#
# Content images:

Three types of images:

Content images: Just as necassary to the page as text (ie Amazon product images)
Layout images: appear in the background of the page.
User interface images: Such as little arrows for drop down menus.

Images made with `<img>` tag. Like `<link>` it is an "empty" tag and so doesn't have a closing tag.

The file of the image you want is denoted by the `src` attribute.

`<img src="cake.png">`

But it makes more sense to put images in their own folder, but remember to update the relative path, i.e.: `src="images/cake.png"`

Images are loaded by the browser requesting the page HTML. This reads the `<img>` tag, and the browser requests the `src` in the `<img>` tag. So it is a separate request to the server.

Images should also have an `alt` attribute. This describes the content of the image:

`<img src="cake.png" alt="Magic Cake Photo">`

This is for users who can't see the content.

`<img>` is an inline level tag - so usually goes inside another block level tag, for example `<li></li>`

Another use of content images is for logos.

`<img>` is an inline level tag, and so can't be aligned with the `text-align` property. Instead, set `display: block;` in the css, and then use the `margin: auto;` approach.

```
.header img{
  display: block;
  margin: 0 auto 0 auto;
}
```

#
# Background images: 

Not added in HTML, but in CSS.

They have several properties:

First `background-color`. This should ALWAYS be set in case the background fails to load.

Next `background-image: url(path/to/file);` sets a background image. You do not need quotes around a filename in the CSS path to the file.

Next `background-position`. It has two keywords, the first has to be one of:
`top`, `center` or `bottom`.

The second must be one of: `left`, center` or `right`.

Next, if it is a small picture, you can set it to repeat, using `backgroun-repeat`. Setting to `repeat` makes the image tile. Other options include `repeat-x` and `repeat-y`, to get it to repeat in only one direction. Or `no-repeat` to ensure no repeating.

```
body {
  background-color: #5f5f5f;
  background-image: url(images/of/cheese.jpg);
  background-position: top left;
  background-repeat: repeat;
}
```

`background` can also be shortened into one line:

```
body {
  background: #5f5f5f url(images/of/cheese.jpg) top left repeat;
}
```

To use as a background to text, you might want an empty `<div>` in HTML.

```
  <div class="featured-image">
  </div>
```

Then in CSS:

```
.featured-image {
  width: 630px;
  height: 246px;
  background: #ffffff url(images/featured-cake.png) top left no-repeat;
}
```

The height and width are specifically set to be the size of the image.

But as it is a background image, you can make a text tag a child of the div.

So:


```
<div class="featured-image">
  <h3>Text in here</h3>
</div>
```

And can the use CSS to alter the text content area.

Also, new property of text: `text-transform: uppercase;`

Typically when dealing with backgrounds, start with the biggest area first, at the back. Then work up in layers of smaller area.

#
# Floating images:

When you need an image to the left of some text.
Image is inline, text is block level.

We need to use `float`:

```
<ul class="recipes">
  <li>
    <img src=...>
    <h3><a href=...>Magic Cake</a></h3>
    <p>...</p>
  </li>
</ul>
```

Then in CSS:

```
.recipes img {
  float: left;
  padding-right: 10px;
}
```

This makes the picture sit next to the left of two block text leves.

CSS Cross country course has a lot of use cases.

#
# Adjusting font-styles:

There are default font styles.

In the body selector, start by:

```
body {
  font-family: Helvetica, "Times New Roman", Arial, sans-serif;
```

These are listed in order you want the browser to try and load them. Also, if the font name is multiple separate words, put quotation marks around the whole string.

But what about sizes and weights. Reset everything to a basic default property:

```
html, body, h1, h2... {
    font-size=100%;
    font: inherit;
}
```

Then for individual selectors, you can change things like `font-size`:

```
h2 {
  font-size: 26px;
}
```

For `font-size` you can use pixels, percentages and ems. Pixels are fixed, and perhaps more straightforward to start with.

`font-weight: bold;` is another example, `normal` is the default.

Other options:
`normal`, `lighter`, `bold`, `bolder`, or `100`, `200`, ... `900`

Other properties:

`font-style: italic;`
`text-transform: uppercase;`

Snazzy way to show a copyright symbol: `& copy;`

Adjusting line height:

Like a margin for each line (spacing) of text.

`line-height: 26px;`

#
# Creating web forms:

Way to get input from user.

Have labels, inputs, text areas and buttons.

The whole thing is surrounded by a `<form>` tag:

Simple example:

```
<form>
  <label>Recipe Name</label>
  <input type="text">
  <input type="submit" value="Click to Submit">
</form>
```

"submit" input type - would make it all get sent to the server.

Different values for the `type` field include:

`text`, `checkbox`, `radio`, `file`, `password` and `submit`

File is for uploading a file.

Attributes need to be added to the label tags to tie it all together:

```
<form>
  <label for="recipe-name">Recipe Name</label>
  <input type="text" id="recipe-name">
  <input type="submit" value="Click to Submit">
</form>
```
The `for` and `id` are used to associate the label with the input.

If you want to add a lot of text, use a `<textarea>` tag. (requires a closing tag, unlike `<input>`)

```
<form>
  <label for="ingredients">Ingredients</label>
  <textarea id="ingredients"></textarea>
  <input type="submit" value="Click to Submit">
</form>
```

"textareas" do not need a type, as they can only contain text.

Styling forms.

Probably want to make them block, rather than inline.

```
label, input {
  display: block;
}
```

This makes the label above the place to input data.

Probably want a bottom margin to the label and input. Also a width for all the inputs that is the same.

```
label {
  margin-bottom: 10px;
}
input {
  margin-bottom: 25px;
  width: 500px;
}
```

But now the submit button would be really wide. So you can use an attribute selector. i.e. if an attribute of a tag is a particular value, then apply the CSS to it:

```
input[type=submit] {
  width: 120px;
  font-size: 20px;
}
```

You don't need quotes about the attribute value.

Similarly with text inputs, make their border a different colour:

```
input[type=text] {
  border: 2px solid #7facaa;
  font-size: 24px;
  padding: 7px;
}
```

The `font-size` and `padding` routines are how to change the height (you can't just use `height` in this tag)
That way the text is nice and big, and not too close to the border.

For a text area, though, you can use `height`.

What about a checkbox:

```
<form>
  <label for="newsletter"><Get Newsletters?</label>
  <input type="checkbox" id="newsletter">
  ...
</form>
```

You usually want the label and box inline.

To undo the blocking in this instance, you use an attribute selector:

```
input[type=checkbox], label[for=newsletter] {
  display: inline;
}
```

#
# Useful links:

Mozilla Developer Network. Particularly HTML Element reference and attributes.

"Learn to Code HTML and CSS" is another good resource. It overlaps with Code School.
There is also CodePen. It's like a live preview for prototyping. Really COOL.
